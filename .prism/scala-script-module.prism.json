{
  "#": "NOT recommend to edit manually. Write carefully! This file is generated by code-prism vscode extension.",
  "ver": "1.0.0",
  "name": "scala-script-module",
  "issues": [
    {
      "id": "665df84f365ef2c4d89c3aafd816fe6e",
      "title": "`ScopeProvider: services => new ScalaScriptScopeProvider(services),` at scala-script-lsp\\src\\language\\scala-script-module.ts#52",
      "source": {
        "file": "/scala-script-lsp/src/language/scala-script-module.ts",
        "startLine": 71,
        "startColumn": 0,
        "endLine": 71,
        "endColumn": 0
      },
      "notes": [
        {
          "id": "ddea3cc847cd2da3ceeb155e57f34f7f",
          "category": "Todo",
          "importance": "Medium",
          "createdAt": "2024-11-17T10:22:20.907Z",
          "content": "이게 궂이 함수로 처리되는 이유는? 그리고 함수로 해도 문법적으로 문제가 없는 이유는?"
        }
      ]
    },
    {
      "id": "8e9623500667e06fe539ca3bdd0cd04a",
      "title": "`const reference = (nodeElem as GenericAstNode)[assignment.feature]` at scala-script-lsp\\src\\language\\scala-script-module.ts#142",
      "source": {
        "file": "/scala-script-lsp/src/language/scala-script-module.ts",
        "startLine": 156,
        "startColumn": 0,
        "endLine": 156,
        "endColumn": 0
      },
      "notes": [
        {
          "id": "39502a4f1fcac7ca9b0d26d6e450d924",
          "category": "Todo",
          "importance": "Medium",
          "createdAt": "2024-11-17T12:34:45.677Z",
          "content": "assignment.feature 는 내가 정의한 문법에서 어떤 항목의 이름이다.\n예를들어 \n```\nVariableDef:\n  (Annotation)? (export?='export')? (private?='private')? (static?='static')?\n  kind=('val' | 'var') name=Id (nullable?='?')? (':' type=Types)? ('=' value=Expression)?;\n```\n와 같은 경우 이름에 해당하는 export, private, static, kind, name, type, value 등이 될 수 있다."
        },
        {
          "id": "84c150ebee4d947ef700afe650b0871a",
          "category": "Todo",
          "importance": "Medium",
          "createdAt": "2024-11-17T14:04:26.862Z",
          "content": "isReference()가 다음과 같이 정의되므로\r\n```\r\nreturn typeof obj === 'object' && obj !== null && typeof (obj as Reference).$refText === 'string';\r\n```\r\n여기서는 name, type이 reference로 선택되고 value중에서 literal 같은 것은 object가 안되기 때문에 reference가 안되지만 그렇지 않으면 가능할 수도 있다."
        }
      ]
    },
    {
      "id": "396ac02b9656276ee03626942bccf0d8",
      "title": "`override findDeclaration(sourceCstNode: CstNode): AstNode | undefined {` at scala-script-lsp\\src\\language\\scala-script-module.ts#128",
      "source": {
        "file": "/scala-script-lsp/src/language/scala-script-module.ts",
        "startLine": 128,
        "startColumn": 0,
        "endLine": 128,
        "endColumn": 0
      },
      "notes": [
        {
          "id": "cbda42b5c121fdd71be5a2aa5f00dd72",
          "category": "Docs",
          "importance": "Medium",
          "createdAt": "2024-11-17T13:31:33.454Z",
          "content": "지금까지의 분석으로는...\r\n\r\n심볼이 클릭되어지면 이전에 선택되어진 것에 대해서도 이 함수가 호출되고 새로 선택되어진 것도 호출되는데 이전것은 보통 1 ~ 2회 정도, 새로운 것은 2 ~ 3회 정도 호출되는데 이것도 일정하지 않다.\r\n\r\n문자열의 일부만 클릭되어도 문자열 전체를 인식한다. 문자열은 'value'로 취급된다.\r\n\r\n변수 n을 인수로 사용하는 다음의 구문이 있다고 하면\r\n\r\nvar n = 10\r\nconsole.log(n)\r\n\r\n이 구문에서 n은 파싱 단계에서 이미 n의 ref를 가지고 있다.\r\n\r\nfindDeclaration()는 sourceCstNote가 Assignment인지를 검사하고 그럴 경우 reference인지도 검사한 후 ref를 리턴한다. Assignment가 아닌 경우에는 그냥 NameNode를 리턴한다.\r\n\r\nAssignment인 경우를 먼저 살펴보면\r\n여기서의 Assignment는 스칼라스크립트의 assignment와 다르고 정확한 것은 모르겠지만 인수 n은 내부적으로 Assignment인 것으로 보인다. 그리고 n은 reference이기 때문에 n의 원래 선언을 찾을 수 있다.\r\n\r\n이때 n의 ref를 구하기 위해서는 astnode가 필요하다. cstnode에는 이 정보가 없는 듯... 그리고 astnode의 어떤 프로퍼티를 참조할 것인지를 결정해야 하는 것 같은데 이를 assignment.feature를 이용하고 있다. n의 경우에는 n은 Expression이고 이것을 따라가다 보면 결국 RefCall이 되는데 RefCall이 함수 호출이거나 배열인 경우가 아니므로 결국 element=[NamedElement:Id] 항목으로 귀결된다. 따라서 element 프로퍼티의 값이 ref를 얻을 수 있는 프로퍼티인 것이다."
        }
      ]
    },
    {
      "id": "f17c35a94f4384ef680e271ba302b37b",
      "title": "`const assignment = GrammarUtils.findAssignment(sourceCstNode)` at scala-script-lsp\\src\\language\\scala-script-module.ts#132",
      "source": {
        "file": "/scala-script-lsp/src/language/scala-script-module.ts",
        "startLine": 131,
        "startColumn": 4,
        "endLine": 148,
        "endColumn": 5
      },
      "notes": [
        {
          "id": "90783eb2b98b1cca3783688ae4e93697",
          "category": "Todo",
          "importance": "Medium",
          "createdAt": "2024-11-18T00:58:31.545Z",
          "content": "위 코드를 보면 cstNode가 상위 컨테이너를 이동하는 동안에 astNote가 유지될 수 있는 것으로 보인다. cstNode와 astNode가 어떤 관계인지를 이제는 알 필요가 있다..."
        }
      ]
    },
    {
      "id": "d650db438f73466f1826dd5be1b7b030",
      "title": "`if (nodeElem) {` at scala-script-lsp\\src\\language\\scala-script-module.ts#157",
      "source": {
        "file": "/scala-script-lsp/src/language/scala-script-module.ts",
        "startLine": 177,
        "startColumn": 0,
        "endLine": 184,
        "endColumn": 7
      },
      "notes": [
        {
          "id": "de116b4babefd68f4e75e9921436b0f6",
          "category": "Todo",
          "importance": "Medium",
          "createdAt": "2024-11-17T14:05:40.940Z",
          "content": "Reference가 아니라도 name node이면(sourceCstNode이거나 자식노드인 경우) 선택된다? 아마도 해당 파일에서 정의되지 않은 것들도 처리할 수 있게 하기 위해서 넘겨주는 것으로 보인다."
        }
      ]
    },
    {
      "id": "c99451bd5f879d85c5df34a427264236",
      "title": "`let indexReferences = this.index.findAllReferences(targetNode, this.nodeLocator.getAstNodePath(targetNode))` at scala-script-lsp\\src\\language\\scala-script-module.ts#207",
      "source": {
        "file": "/scala-script-lsp/src/language/scala-script-module.ts",
        "startLine": 207,
        "startColumn": 0,
        "endLine": 207,
        "endColumn": 0
      },
      "notes": [
        {
          "id": "1d90792f9ae7d3569b531d8455a07205",
          "category": "Todo",
          "importance": "Medium",
          "createdAt": "2024-11-18T02:59:05.925Z",
          "content": "전체적으로 하는 일이 많지만 결국은 index.findAllReferences가 가장 중요한 함수이지 않을까"
        }
      ]
    }
  ]
}