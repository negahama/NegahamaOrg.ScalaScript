{
  "#": "NOT recommend to edit manually. Write carefully! This file is generated by code-prism vscode extension.",
  "ver": "1.0.0",
  "name": "scala-script-workspace",
  "issues": [
    {
      "id": "e7102cc3b52c0e4ea72c86262c701d6a",
      "title": "`const documents = await this.performStartup(folders)` at scala-script-cli\\src\\scala-script-workspace.ts#40",
      "source": {
        "file": "/scala-script-cli/src/scala-script-workspace.ts",
        "startLine": 40,
        "startColumn": 0,
        "endLine": 40,
        "endColumn": 0
      },
      "notes": [
        {
          "id": "9ad147b1dc74e69196b7c53068c83779",
          "category": "Todo",
          "importance": "Medium",
          "createdAt": "2025-01-08T09:33:41.874Z",
          "content": "대부분의 시간은 `performStartup()`의 아래 코드에서 소요된다.\n```\nawait Promise.all(\n    folders.map(wf => [wf, this.getRootFolder(wf)] as [WorkspaceFolder, URI])\n        .map(async entry => this.traverseFolder(...entry, fileExtensions, collector))\n);\n```\n이것은 결국 `DefaultLangiumDocuments`의 아래 함수가 핵심이다.\n```\nasync getOrCreateDocument(uri: URI, cancellationToken?: CancellationToken): Promise<LangiumDocument> {\n    let document = this.getDocument(uri);\n    if (document) {\n        return document;\n    }\n    document = await this.langiumDocumentFactory.fromUri(uri, cancellationToken);\n    this.addDocument(document);\n    return document;\n}\n```\n여기서 무엇을 처리하고 있는지 명확히 할 필요가 있다.\n아울러 아래의 `documentBuilder.build()`도 같이 분석해야 한다.\n즉 Factory와 Builder의 차이점을 알아야 한다.\n"
        }
      ]
    }
  ]
}